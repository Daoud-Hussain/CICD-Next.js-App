name: Dev CI/CD Pipeline

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

env:
  IMAGE_NAME: daoudhussaindev/next-js-app
  NODE_VERSION: 18.x

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js application
        run: npm run build

      - name: Cache build output
        uses: actions/cache@v3
        with:
          path: |
            .next
            node_modules
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .next
            node_modules
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

  deploy:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME_DEV }}
          password: ${{ secrets.DOCKER_PASSWORD_DEV }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:dev
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:dev
          cache-to: type=inline

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
          if_key_exists: replace

      - name: Deploy to server
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'EOF'
            # Pull the latest image
            docker pull ${{ env.IMAGE_NAME }}:dev
            
            # Stop and remove existing container
            docker stop dev-container || true
            docker rm dev-container || true
            
            # Run new container
            docker run -d \
              --name dev-container \
              --restart unless-stopped \
              -p 3000:3000 \
              ${{ env.IMAGE_NAME }}:dev
            
            # Clean up old images
            docker image prune -f
          EOF
